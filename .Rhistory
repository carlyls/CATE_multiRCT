col_sds <- apply(sim_subset,2,sd)
mean_mses[i,"best_col"] <- sd_mses[i,"best_col"] <- names(which.min(col_means))
mean_mses[i,"num_iter"] <- sd_mses[i,"num_iter"] <- nrow(sim_subset)
mean_mses[i, grep("x_nostudy",colnames(mean_mses)):ncol(mean_mses)] <- round(col_means,4)
sd_mses[i, grep("x_nostudy",colnames(mean_mses)):ncol(mean_mses)] <- paste(round(col_means,2), " (",
round(col_sds,2), ")", sep="")
}
head(all)
head(mean_mses)
#add results in
mean_mses <- sd_mses <- settings
#add results in
head(mean_mses)
for (i in 1:nrow(mean_mses)) {
if (mean_mses$scenario[i] %in% c("1a","1b")) {
sim_subset <- filter(all, K==mean_mses$K[i], n_mean==mean_mses$n_mean[i], n_sd==mean_mses$n_sd[i],
study_sd==mean_mses$study_sd[i], study_inter_sd==mean_mses$study_inter_sd[i],
scenario==mean_mses$scenario[i]) %>% select(1:16)
} else {
sim_subset <- filter(all, K==mean_mses$K[i], n_mean==mean_mses$n_mean[i], n_sd==mean_mses$n_sd[i],
scenario==mean_mses$scenario[i]) %>% select(1:16)
}
col_means <- colMeans(sim_subset)
col_sds <- apply(sim_subset,2,sd)
mean_mses[i,"best_col"] <- sd_mses[i,"best_col"] <- names(which.min(col_means))
mean_mses[i,"num_iter"] <- sd_mses[i,"num_iter"] <- nrow(sim_subset)
mean_mses[i, grep("x_nostudy",colnames(mean_mses)):ncol(mean_mses)] <- round(col_means,4)
sd_mses[i, grep("x_nostudy",colnames(mean_mses)):ncol(mean_mses)] <- paste(round(col_means,2), " (",
round(col_sds,2), ")", sep="")
}
colnames(mean_mses)
#set up settings
settings <- expand.grid(K=c(10),
n_mean=c(500),
n_sd=c(0),
study_mean=c(0),
study_inter_mean=c(0),
study_sds=c("0.5,0", "1,0", "1,0.5",
"1,1", "3,1"),
scenario=c("1a","1b")) %>%
separate(study_sds, into=c("study_sd", "study_inter_sd"), sep=",") %>%
mutate(study_sd = as.numeric(study_sd),
study_inter_sd = as.numeric(study_inter_sd),
scenario = factor(scenario, levels=c("1a","1b","2"))) %>%
rbind(c(K=10, n_mean=500, n_sd=0, study_mean=0, study_inter_mean=0, study_sd=NA, study_inter_sd=NA, scenario=2)) %>%
mutate(best_col = NA, num_iter = NA)
#make columns for mses
for (i in 1:16) {
settings <- mutate(settings,
name = "NA")
colnames(settings)[length(colnames(settings))] <- colnames(all)[i]
}
#add results in
mean_mses <- sd_mses <- settings
for (i in 1:nrow(mean_mses)) {
if (mean_mses$scenario[i] %in% c("1a","1b")) {
sim_subset <- filter(all, K==mean_mses$K[i], n_mean==mean_mses$n_mean[i], n_sd==mean_mses$n_sd[i],
study_sd==mean_mses$study_sd[i], study_inter_sd==mean_mses$study_inter_sd[i],
scenario==mean_mses$scenario[i]) %>% select(1:16)
} else {
sim_subset <- filter(all, K==mean_mses$K[i], n_mean==mean_mses$n_mean[i], n_sd==mean_mses$n_sd[i],
scenario==mean_mses$scenario[i]) %>% select(1:16)
}
col_means <- colMeans(sim_subset)
col_sds <- apply(sim_subset,2,sd)
mean_mses[i,"best_col"] <- sd_mses[i,"best_col"] <- names(which.min(col_means))
mean_mses[i,"num_iter"] <- sd_mses[i,"num_iter"] <- nrow(sim_subset)
mean_mses[i, grep("x_nostudy",colnames(mean_mses)):ncol(mean_mses)] <- round(col_means,4)
sd_mses[i, grep("x_nostudy",colnames(mean_mses)):ncol(mean_mses)] <- paste(round(col_means,2), " (",
round(col_sds,2), ")", sep="")
}
#make long data for plotting
means_long <- mean_mses %>%
pivot_longer(cols=x_nostudy:ma,
names_to="Method",
values_to="MSE") %>%
mutate(MSE = as.numeric(MSE),
Method = factor(Method, levels=c("x_nostudy","s_nostudy","causal_nostudy",
"x_studyind","s_studyind","causal_studyind",
"x_tree","s_tree","causal_tree",
"x_forest","s_forest","causal_forest",
"x_lasso","s_lasso","causal_lasso","ma")),
base = case_when(grepl("x_",Method)==T ~ "Xlearner",
grepl("s_",Method)==T ~ "Slearner",
grepl("causal_",Method)==T ~ "Causal Forest",
grepl("ma",Method)==T ~ "Meta-Analysis"),
ensemble = case_when(grepl("nostudy",Method)==T ~ "Complete Pooling",
grepl("studyind",Method)==T ~ "Trial Indicator",
grepl("tree", Method)==T ~ "Ensemble Tree",
grepl("forest",Method)==T ~ "Ensemble Forest",
grepl("lasso",Method)==T ~ "Ensemble Lasso",
grepl("ma",Method)==T ~ "Meta-Analysis"),
base = factor(base, levels=c("Xlearner", "Slearner", "Causal Forest", "Meta-Analysis")),
ensemble = factor(ensemble, levels=c("Complete Pooling", "Trial Indicator", "Ensemble Tree",
"Ensemble Forest","Ensemble Lasso", "Meta-Analysis")),
sds = paste(study_sd, study_inter_sd, sep=", "), sds = factor(sds),
ns = paste(n_mean, n_sd, sep=", "),
sc_combo = paste(scenario, study_sd, study_inter_sd, sep="_"),
sc_combo = factor(sc_combo))
means_long %>%
rename(Ensemble = ensemble, Base = base) %>%
mutate(scenario = ifelse(scenario=="1a", "Piecewise Linear CATE",
ifelse(scenario=="1b", "Non-linear CATE",
"Variable CATE")),
scenario = factor(scenario, levels=c("Piecewise Linear CATE",
"Non-linear CATE",
"Variable CATE"))) %>%
ggplot(aes(x=sds, y=MSE, group=Method, color=Ensemble)) +
geom_jitter(aes(shape=Base), size=2.5, width=.2, height=0) +
#geom_line() +
facet_wrap(~scenario, scales='free') +
scale_x_discrete(labels = c("Low-Low","Med-Low", "Med-Med", "Med-High","High-High")) +
scale_y_continuous(limits = c(0, 2.1)) +
labs(shape="Single-Study Method", color="Aggregation Method") +
guides(shape=guide_legend(order=1), color=guide_legend(order=2)) +
#theme(axis.text.x = element_text(angle = 45)) +
xlab("SD of Study Main and Study Interaction Coefficients") +
theme(text = element_text(size=12))
means_long %>%
group_by(Method, ensemble, base) %>%
summarise(MSE=mean(MSE)) %>%
ggplot(aes(x=ensemble, y=MSE, group=1, color=base)) +
geom_point(size=5) +
theme(axis.text.x = element_text(angle=45, hjust=1, vjust=1),
plot.margin=margin(10,10,10,30),
text = element_text(size=15)) +
labs(color="Single-Study Approach") +
xlab("Aggregation Approach")
tipr::tip_or_with_binary(effect_observed = 1.39,
exposed_confounder_prev = .6,
unexposed_confounder_prev = .2,
or_correction = F)
tipr::tip_or_with_binary(effect_observed = 1.39,
exposed_confounder_prev = .6,
unexposed_confounder_prev = .2,
or_correction = T)
tipr::tip_or_with_binary(effect_observed = 1.39,
exposed_confounder_prev = .6,
unexposed_confounder_prev = .2,
or_correction = T)
tipr::tip_or_with_binary(effect_observed = 2.08,
exposed_confounder_prev = .6,
unexposed_confounder_prev = .2,
or_correction = T)
tipr::tip_or_with_binary(effect_observed = 1.39,
exposed_confounder_prev = .6,
unexposed_confounder_prev = .2,
or_correction = T)
?tipr::tip_with_binary
?tipr::tip_coef_with_binary
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
read_files <- function (dir) {
setwd(dir)
files <- list.files(pattern="_output_")
mylist <- lapply(files, function(x) {
load(file = x)
get(ls()[ls()!= "filename"])
})
all <- do.call("bind_rows", mylist)
return(all)
}
#load in files
all <- read_files("~/Desktop/Cluster/1SepResults_Scenarios_Honest")
#View(all)
nrow(all) #to make sure every iteration ran
nrow(all %>% select(-iteration) %>% distinct())
length(unique(all$seed)) #to make sure there are no duplicates
#checking number of iterations
sum(all$scenario==3, na.rm=T)
sum(all$lin==T, na.rm=T)
sum(all$lin==F, na.rm=T)
all <- all %>%
mutate(scenario = ifelse(is.na(scenario)==F, "2",
ifelse(lin==T, "1a", "1b")),
scenario = factor(scenario, levels=c("1a","1b","2")),
sc_combo = paste(scenario, study_sd, study_inter_sd, sep="_"),
sc_combo = factor(sc_combo)) %>%
select(-c(lin, study_mean, study_inter_mean))
table(all$sc_combo)
#set up settings
settings<-expand.grid(K=c(10),
n_mean=c(500),
n_sd=c(0),
study_sds=c("0.5,0", "1,0", "1,0.5",
"1,1", "3,1"),
scenario=c("1a","1b")) %>%
separate(study_sds, into=c("study_sd", "study_inter_sd"), sep=",") %>%
mutate(study_sd = as.numeric(study_sd),
study_inter_sd = as.numeric(study_inter_sd),
scenario = factor(scenario, levels=c("1a","1b","2"))) %>%
rbind(c(K=10, n_mean=500, n_sd=0, study_sd=NA, study_inter_sd=NA, scenario=2)) %>%
mutate(best_col = NA, num_iter = NA)
#make columns for mses
for (i in 1:16) {
settings <- mutate(settings,
name = "NA")
colnames(settings)[length(colnames(settings))] <- colnames(all)[i]
}
#add results in
mean_mses <- sd_mses <- settings
for (i in 1:nrow(mean_mses)) {
if (mean_mses$scenario[i] %in% c("1a","1b")) {
sim_subset <- filter(all, K==mean_mses$K[i], n_mean==mean_mses$n_mean[i], n_sd==mean_mses$n_sd[i],
study_sd==mean_mses$study_sd[i], study_inter_sd==mean_mses$study_inter_sd[i],
scenario==mean_mses$scenario[i]) %>% select(1:16)
} else {
sim_subset <- filter(all, K==mean_mses$K[i], n_mean==mean_mses$n_mean[i], n_sd==mean_mses$n_sd[i],
scenario==mean_mses$scenario[i]) %>% select(1:16)
}
col_means <- colMeans(sim_subset)
col_sds <- apply(sim_subset,2,sd)
mean_mses[i,"best_col"] <- sd_mses[i,"best_col"] <- names(which.min(col_means))
mean_mses[i,"num_iter"] <- sd_mses[i,"num_iter"] <- nrow(sim_subset)
mean_mses[i, grep("x_nostudy",colnames(mean_mses)):ncol(mean_mses)] <- round(col_means,4)
sd_mses[i, grep("x_nostudy",colnames(mean_mses)):ncol(mean_mses)] <- paste(round(col_means,2), " (",
round(col_sds,2), ")", sep="")
}
#make long data for plotting
means_long <- mean_mses %>%
pivot_longer(cols=x_nostudy:ma,
names_to="Method",
values_to="MSE") %>%
mutate(MSE = as.numeric(MSE),
Method = factor(Method, levels=c("x_nostudy","s_nostudy","causal_nostudy",
"x_studyind","s_studyind","causal_studyind",
"x_tree","s_tree","causal_tree",
"x_forest","s_forest","causal_forest",
"x_lasso","s_lasso","causal_lasso","ma")),
base = case_when(grepl("x_",Method)==T ~ "Xlearner",
grepl("s_",Method)==T ~ "Slearner",
grepl("causal_",Method)==T ~ "Causal Forest",
grepl("ma",Method)==T ~ "Meta-Analysis"),
ensemble = case_when(grepl("nostudy",Method)==T ~ "Complete Pooling",
grepl("studyind",Method)==T ~ "Trial Indicator",
grepl("tree", Method)==T ~ "Ensemble Tree",
grepl("forest",Method)==T ~ "Ensemble Forest",
grepl("lasso",Method)==T ~ "Ensemble Lasso",
grepl("ma",Method)==T ~ "Meta-Analysis"),
base = factor(base, levels=c("Xlearner", "Slearner", "Causal Forest", "Meta-Analysis")),
ensemble = factor(ensemble, levels=c("Complete Pooling", "Trial Indicator", "Ensemble Tree",
"Ensemble Forest","Ensemble Lasso", "Meta-Analysis")),
sds = paste(study_sd, study_inter_sd, sep=", "), sds = factor(sds),
ns = paste(n_mean, n_sd, sep=", "),
sc_combo = paste(scenario, study_sd, study_inter_sd, sep="_"),
sc_combo = factor(sc_combo))
means_long %>%
group_by(Method, ensemble, base) %>%
summarise(MSE=mean(MSE)) %>%
ggplot(aes(x=ensemble, y=MSE, group=1, color=base)) +
geom_point(size=5) +
theme(axis.text.x = element_text(angle=45, hjust=1, vjust=1),
plot.margin=margin(10,10,10,30),
text = element_text(size=15)) +
labs(color="Single-Study Approach") +
xlab("Aggregation Approach")
means_long %>%
filter(Method != "Meta-Analysis") %>%
group_by(Method, ensemble, base) %>%
summarise(MSE=mean(MSE)) %>%
ggplot(aes(x=ensemble, y=MSE, group=1, color=base)) +
geom_point(size=5) +
theme(axis.text.x = element_text(angle=45, hjust=1, vjust=1),
plot.margin=margin(10,10,10,30),
text = element_text(size=15)) +
labs(color="Single-Study Approach") +
xlab("Aggregation Approach")
head(means_long)
table(means_long$Method)
means_long %>%
filter(Method != "ma") %>%
group_by(Method, ensemble, base) %>%
summarise(MSE=mean(MSE)) %>%
ggplot(aes(x=ensemble, y=MSE, group=1, color=base)) +
geom_point(size=5) +
theme(axis.text.x = element_text(angle=45, hjust=1, vjust=1),
plot.margin=margin(10,10,10,30),
text = element_text(size=15)) +
labs(color="Single-Study Approach") +
xlab("Aggregation Approach")
hex <- hue_pal()(4)
hex <- scales::hue_pal()(4)
hex
means_long %>%
filter(Method != "ma") %>%
group_by(Method, ensemble, base) %>%
summarise(MSE=mean(MSE)) %>%
ggplot(aes(x=ensemble, y=MSE, group=1, color=base)) +
geom_point(size=5) +
theme(axis.text.x = element_text(angle=45, hjust=1, vjust=1),
plot.margin=margin(10,10,10,30),
text = element_text(size=15)) +
labs(color="Single-Study Approach") +
xlab("Aggregation Approach") +
scale_color_manual(values=c("#F8766D","#7CAE00","#00BFC4"))
#make long data for plotting
means_long <- mean_mses %>%
pivot_longer(cols=x_nostudy:ma,
names_to="Method",
values_to="MSE") %>%
mutate(MSE = as.numeric(MSE),
Method = factor(Method, levels=c("x_nostudy","s_nostudy","causal_nostudy",
"x_studyind","s_studyind","causal_studyind",
"x_tree","s_tree","causal_tree",
"x_forest","s_forest","causal_forest",
"x_lasso","s_lasso","causal_lasso","ma")),
base = case_when(grepl("x_",Method)==T ~ "X-Learner",
grepl("s_",Method)==T ~ "S-Learner",
grepl("causal_",Method)==T ~ "Causal Forest",
grepl("ma",Method)==T ~ "Meta-Analysis"),
ensemble = case_when(grepl("nostudy",Method)==T ~ "Complete Pooling",
grepl("studyind",Method)==T ~ "Trial Indicator",
grepl("tree", Method)==T ~ "Ensemble Tree",
grepl("forest",Method)==T ~ "Ensemble Forest",
grepl("lasso",Method)==T ~ "Ensemble Lasso",
grepl("ma",Method)==T ~ "Meta-Analysis"),
base = factor(base, levels=c("Xlearner", "Slearner", "Causal Forest", "Meta-Analysis")),
ensemble = factor(ensemble, levels=c("Complete Pooling", "Trial Indicator", "Ensemble Tree",
"Ensemble Forest","Ensemble Lasso", "Meta-Analysis")),
sds = paste(study_sd, study_inter_sd, sep=", "), sds = factor(sds),
ns = paste(n_mean, n_sd, sep=", "),
sc_combo = paste(scenario, study_sd, study_inter_sd, sep="_"),
sc_combo = factor(sc_combo))
#make long data for plotting
means_long <- mean_mses %>%
pivot_longer(cols=x_nostudy:ma,
names_to="Method",
values_to="MSE") %>%
mutate(MSE = as.numeric(MSE),
Method = factor(Method, levels=c("x_nostudy","s_nostudy","causal_nostudy",
"x_studyind","s_studyind","causal_studyind",
"x_tree","s_tree","causal_tree",
"x_forest","s_forest","causal_forest",
"x_lasso","s_lasso","causal_lasso","ma")),
base = case_when(grepl("x_",Method)==T ~ "X-Learner",
grepl("s_",Method)==T ~ "S-Learner",
grepl("causal_",Method)==T ~ "Causal Forest",
grepl("ma",Method)==T ~ "Meta-Analysis"),
ensemble = case_when(grepl("nostudy",Method)==T ~ "Complete Pooling",
grepl("studyind",Method)==T ~ "Trial Indicator",
grepl("tree", Method)==T ~ "Ensemble Tree",
grepl("forest",Method)==T ~ "Ensemble Forest",
grepl("lasso",Method)==T ~ "Ensemble Lasso",
grepl("ma",Method)==T ~ "Meta-Analysis"),
base = factor(base, levels=c("X-Learner", "S-Learner", "Causal Forest", "Meta-Analysis")),
ensemble = factor(ensemble, levels=c("Complete Pooling", "Trial Indicator", "Ensemble Tree",
"Ensemble Forest","Ensemble Lasso", "Meta-Analysis")),
sds = paste(study_sd, study_inter_sd, sep=", "), sds = factor(sds),
ns = paste(n_mean, n_sd, sep=", "),
sc_combo = paste(scenario, study_sd, study_inter_sd, sep="_"),
sc_combo = factor(sc_combo))
means_long %>%
filter(Method != "ma") %>%
group_by(Method, ensemble, base) %>%
summarise(MSE=mean(MSE)) %>%
ggplot(aes(x=ensemble, y=MSE, group=1, color=base)) +
geom_point(size=5) +
theme(axis.text.x = element_text(angle=45, hjust=1, vjust=1),
plot.margin=margin(10,10,10,30),
text = element_text(size=15)) +
labs(color="Single-Study Approach") +
xlab("Aggregation Approach") +
scale_color_manual(values=c("#F8766D","#7CAE00","#00BFC4"))
#overall average MSE across all combinations
means_long %>%
filter(Method != "ma") %>%
group_by(Method, ensemble, base) %>%
summarise(MSE=mean(MSE)) %>%
ggplot(aes(x=ensemble, y=MSE, group=1, color=base)) +
geom_point(size=5) +
theme(axis.text.x = element_text(angle=45, hjust=1, vjust=1),
plot.margin=margin(10,10,10,30),
text = element_text(size=15)) +
labs(color="Single-Study Approach") +
xlab("Aggregation Approach") +
scale_color_manual(values=c("#F8766D","#7CAE00","#00BFC4"))
ggsave("MLSims_Honest_15Feb2023.jpeg",width=8,height=5,units="in")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
read_files <- function (dir) {
setwd(dir)
files <- list.files(pattern="_output_")
mylist <- lapply(files, function(x) {
load(file = x)
get(ls()[ls()!= "filename"])
})
all <- do.call("bind_rows", mylist)
return(all)
}
#load in files
all <- read_files("~/Desktop/Cluster/1SepResults_Scenarios_Honest")
#View(all)
nrow(all) #to make sure every iteration ran
nrow(all %>% select(-iteration) %>% distinct())
length(unique(all$seed)) #to make sure there are no duplicates
#checking number of iterations
sum(all$scenario==3, na.rm=T)
sum(all$lin==T, na.rm=T)
sum(all$lin==F, na.rm=T)
all <- all %>%
mutate(scenario = ifelse(is.na(scenario)==F, "2",
ifelse(lin==T, "1a", "1b")),
scenario = factor(scenario, levels=c("1a","1b","2")),
sc_combo = paste(scenario, study_sd, study_inter_sd, sep="_"),
sc_combo = factor(sc_combo)) %>%
select(-c(lin, study_mean, study_inter_mean))
table(all$sc_combo)
#set up settings
settings<-expand.grid(K=c(10),
n_mean=c(500),
n_sd=c(0),
study_sds=c("0.5,0", "1,0", "1,0.5",
"1,1", "3,1"),
scenario=c("1a","1b")) %>%
separate(study_sds, into=c("study_sd", "study_inter_sd"), sep=",") %>%
mutate(study_sd = as.numeric(study_sd),
study_inter_sd = as.numeric(study_inter_sd),
scenario = factor(scenario, levels=c("1a","1b","2"))) %>%
rbind(c(K=10, n_mean=500, n_sd=0, study_sd=NA, study_inter_sd=NA, scenario=2)) %>%
mutate(best_col = NA, num_iter = NA)
#make columns for mses
for (i in 1:16) {
settings <- mutate(settings,
name = "NA")
colnames(settings)[length(colnames(settings))] <- colnames(all)[i]
}
#add results in
mean_mses <- sd_mses <- settings
for (i in 1:nrow(mean_mses)) {
if (mean_mses$scenario[i] %in% c("1a","1b")) {
sim_subset <- filter(all, K==mean_mses$K[i], n_mean==mean_mses$n_mean[i], n_sd==mean_mses$n_sd[i],
study_sd==mean_mses$study_sd[i], study_inter_sd==mean_mses$study_inter_sd[i],
scenario==mean_mses$scenario[i]) %>% select(1:16)
} else {
sim_subset <- filter(all, K==mean_mses$K[i], n_mean==mean_mses$n_mean[i], n_sd==mean_mses$n_sd[i],
scenario==mean_mses$scenario[i]) %>% select(1:16)
}
col_means <- colMeans(sim_subset)
col_sds <- apply(sim_subset,2,sd)
mean_mses[i,"best_col"] <- sd_mses[i,"best_col"] <- names(which.min(col_means))
mean_mses[i,"num_iter"] <- sd_mses[i,"num_iter"] <- nrow(sim_subset)
mean_mses[i, grep("x_nostudy",colnames(mean_mses)):ncol(mean_mses)] <- round(col_means,4)
sd_mses[i, grep("x_nostudy",colnames(mean_mses)):ncol(mean_mses)] <- paste(round(col_means,2), " (",
round(col_sds,2), ")", sep="")
}
#make long data for plotting
means_long <- mean_mses %>%
pivot_longer(cols=x_nostudy:ma,
names_to="Method",
values_to="MSE") %>%
mutate(MSE = as.numeric(MSE),
Method = factor(Method, levels=c("x_nostudy","s_nostudy","causal_nostudy",
"x_studyind","s_studyind","causal_studyind",
"x_tree","s_tree","causal_tree",
"x_forest","s_forest","causal_forest",
"x_lasso","s_lasso","causal_lasso","ma")),
base = case_when(grepl("x_",Method)==T ~ "X-Learner",
grepl("s_",Method)==T ~ "S-Learner",
grepl("causal_",Method)==T ~ "Causal Forest",
grepl("ma",Method)==T ~ "Meta-Analysis"),
ensemble = case_when(grepl("nostudy",Method)==T ~ "Complete Pooling",
grepl("studyind",Method)==T ~ "Trial Indicator",
grepl("tree", Method)==T ~ "Ensemble Tree",
grepl("forest",Method)==T ~ "Ensemble Forest",
grepl("lasso",Method)==T ~ "Ensemble Lasso",
grepl("ma",Method)==T ~ "Meta-Analysis"),
base = factor(base, levels=c("S-Learner", "X-Learner", "Causal Forest", "Meta-Analysis")),
ensemble = factor(ensemble, levels=c("Complete Pooling", "Trial Indicator", "Ensemble Tree",
"Ensemble Forest","Ensemble Lasso", "Meta-Analysis")),
sds = paste(study_sd, study_inter_sd, sep=", "), sds = factor(sds),
ns = paste(n_mean, n_sd, sep=", "),
sc_combo = paste(scenario, study_sd, study_inter_sd, sep="_"),
sc_combo = factor(sc_combo))
#overall average MSE across all combinations
means_long %>%
filter(Method != "ma") %>%
group_by(Method, ensemble, base) %>%
summarise(MSE=mean(MSE)) %>%
ggplot(aes(x=ensemble, y=MSE, group=1, color=base)) +
geom_point(size=5) +
theme(axis.text.x = element_text(angle=45, hjust=1, vjust=1),
plot.margin=margin(10,10,10,30),
text = element_text(size=15)) +
labs(color="Single-Study Approach") +
xlab("Aggregation Approach") +
scale_color_manual(values=c("#F8766D","#7CAE00","#00BFC4"))
ggsave("MLSims_Honest_15Feb2023.jpeg",width=8,height=5,units="in")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidyverse)
read_files <- function (dir) {
setwd(dir)
files <- list.files(pattern="_output_")
mylist <- lapply(files, function(x) {
load(file = x)
get(ls()[ls()!= "filename"])
})
all <- do.call("bind_rows", mylist)
return(all)
}
#load in files
all <- read_files("~/Desktop/Cluster/14FebResults")
nrow(all) #to make sure every iteration ran
nrow(all %>% select(-iteration) %>% distinct())
length(unique(all$seed)) #to make sure there are no duplicates
#checking number of iterations
table(all$scenario)
all <- all %>%
mutate(scenario = factor(scenario, levels=c("1a","1b","2")),
sc_combo = paste(scenario, study_sd, study_inter_sd, sep="_"),
sc_combo = factor(sc_combo))
table(all$sc_combo)
