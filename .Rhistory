library(dplyr)
library(causalToolbox)
library(rsample)
library(rpart)
library(ranger)
library(glmnet)
library(grf)
library(fastDummies)
library(lme4)
source("Comparing_methods_functions.R")
gen_data <- function (K, n_mean, n_sd, study_mean, study_inter_mean,
study_sd, study_inter_sd, scenario,
ncovar=5, sd=sqrt(0.01)) {
all_dat <- data.frame()
n_study <- floor(rnorm(K, mean=n_mean, sd=n_sd))
if (scenario %in% c("1a","1b")) {
study_main <- rnorm(K, mean=study_mean, sd=study_sd)
study_inter <- rnorm(K, mean=study_inter_mean, sd=study_inter_sd)
}
for (k in 1:K) {
n <- n_study[k]
#sample covariates
dat <- data.frame(matrix(rnorm(n*ncovar), nrow=n, ncol=ncovar))
colnames(dat) <- paste0("X", seq(1,ncovar))
#treatment
dat$W <- rbinom(n, size=1, prob=0.5)
#study and id
dat$S <- rep(k, n)
dat$id <- seq(1, n)
#noise
dat$eps <- rnorm(n, mean=0, sd=sd)
all_dat <- bind_rows(all_dat, dat)
}
#tau and Y
if (scenario == "1a") {
all_dat$m <- all_dat$X1/2 + all_dat$X2 + all_dat$X3 + all_dat$X4 +
study_main[all_dat$S] + study_inter[all_dat$S]*all_dat$X1
all_dat$tau <- all_dat$X1*(all_dat$X1>0) + study_main[all_dat$S] +
study_inter[all_dat$S]*all_dat$X1
}
if (scenario == "1b") {
all_dat$m <- 0
all_dat$tau <- (2/(1+exp(-12*(all_dat$X1-1/2))))*(2/(1+exp(-12*(all_dat$X2-1/2)))) +
study_main[all_dat$S] + study_inter[all_dat$S]*all_dat$X1
}
if (scenario == "2") {
all_dat$m <- all_dat$X1/2 + all_dat$X2 + all_dat$X3 + all_dat$X4
all_dat$tau <- ifelse(all_dat$S %in% c(1:4), (2/(1+exp(-12*(all_dat$X1-1/2))))*(2/(1+exp(-12*(all_dat$X2-1/2)))),
ifelse(all_dat$S %in% c(5:8), all_dat$X1*(all_dat$X1>0), 0))
}
all_dat$Y <- all_dat$m + (2*all_dat$W-1)/2*all_dat$tau + all_dat$eps
all_dat <- all_dat %>%
select(-eps,-m) %>%
mutate(S = factor(S)) %>%
relocate(S, id, W, X1, X2, X3, X4, X5, Y, tau)
return(all_dat)
}
## Comparing Methods
compare_mse <- function (K, n_mean, n_sd, study_mean, study_inter_mean,
study_sd, study_inter_sd, scenario, honesty) {
#generate data
sim_dat <- gen_data(K, n_mean, n_sd, study_mean, study_inter_mean,
study_sd, study_inter_sd, scenario)
covars <- grep("^X", names(sim_dat), value=TRUE)
feat <- select(sim_dat, c(S,all_of(covars))) %>%
fastDummies::dummy_cols(select_columns="S", remove_selected_columns=T)
feat_nostudy <- select(sim_dat, all_of(covars))
tr <- sim_dat$W
y <- sim_dat$Y
tau_true <- sim_dat$tau
### causal forest options ###
#no study
tau_forest_nostudy <- causal_forest(X=feat_nostudy, Y=y, W=tr, num.threads=3, honesty=honesty, num.trees=1000)
tau_hat_nostudy <- predict(tau_forest_nostudy)$predictions
causal_nostudy <- mean((tau_hat_nostudy - tau_true)^2)
rm(list = c("tau_forest_nostudy", "tau_hat_nostudy"))
#study indicator
tau_forest <- causal_forest(X=feat, Y=y, W=tr, num.threads=3, honesty=honesty, num.trees=1000)
tau_hat <- predict(tau_forest)$predictions
causal_studyind <- mean((tau_hat - tau_true)^2)
rm(list = c("tau_forest", "tau_hat"))
#tan
causal_tan <- tan_preds(K, sim_dat, covars, "causalforest", honesty=honesty)
causal_tree <- causal_tan["mse_tree"]
causal_forest <- causal_tan["mse_forest"]
causal_lasso <- causal_tan["mse_lasso"]
rm(list = c("causal_tan"))
### x-learner options ###
#no study
x_rf_nostudy <- X_RF(feat=feat_nostudy, tr=tr, yobs=y, nthread=3)
cate_x_rf_nostudy <- EstimateCate(x_rf_nostudy, feat_nostudy)
x_nostudy <- mean((cate_x_rf_nostudy - tau_true)^2)
rm(list = c("x_rf_nostudy", "cate_x_rf_nostudy"))
#study indicator
x_rf_studyind <- X_RF(feat = feat, tr = tr, yobs = y, nthread=3)
cate_x_rf_studyind <- EstimateCate(x_rf_studyind, feat)
x_studyind <- mean((cate_x_rf_studyind - tau_true)^2)
rm(list = c("x_rf_studyind", "cate_x_rf_studyind"))
#tan
x_tan <- tan_preds(K, sim_dat, covars, "xlearner")
x_tree <- x_tan["mse_tree"]
x_forest <- x_tan["mse_forest"]
x_lasso <- x_tan["mse_lasso"]
rm(list = c("x_tan"))
### s-learner options ###
#no study
s_rf_nostudy <- S_RF(feat=feat_nostudy, tr=tr, yobs=y, nthread=3)
cate_s_rf_nostudy <- EstimateCate(s_rf_nostudy, feat_nostudy)
s_nostudy <- mean((cate_s_rf_nostudy - tau_true)^2)
rm(list = c("s_rf_nostudy", "cate_s_rf_nostudy"))
#study indicator
s_rf_studyind <- S_RF(feat = feat, tr = tr, yobs = y, nthread=3)
cate_s_rf_studyind <- EstimateCate(s_rf_studyind, feat)
s_studyind <- mean((cate_s_rf_studyind - tau_true)^2)
rm(list = c("s_rf_studyind", "cate_s_rf_studyind"))
#tan
s_tan <- tan_preds(K, sim_dat, covars, "slearner")
s_tree <- s_tan["mse_tree"]
s_forest <- s_tan["mse_forest"]
s_lasso <- s_tan["mse_lasso"]
rm(list = c("s_tan"))
### meta-analysis ###
mixed_mod <- lmer(Y ~ W*X1 + W*X2 + W*X3 + W*X4 + W*X5 + (1|S), data=sim_dat) #naive
sim_dat_trt <- mutate(sim_dat, W=1)
sim_dat_cntrl <- mutate(sim_dat, W=0)
cate_ma <- predict(mixed_mod, sim_dat_trt) - predict(mixed_mod, sim_dat_cntrl)
ma <- mean((cate_ma - tau_true)^2)
mses <- data.frame(x_nostudy, x_studyind, x_tree, x_forest, x_lasso,
causal_nostudy, causal_studyind, causal_tree, causal_forest, causal_lasso,
s_nostudy, s_studyind, s_tree, s_forest, s_lasso, ma)
return(mses)
}
#settings matrix with all the parameters that vary in each parallel run
settings_ind <- expand.grid(K=c(10),
n_mean=c(500),
n_sd=c(0),
study_mean=c(0),
study_inter_mean=c(0),
study_sds=c("0.5,0", "1,0", "1,0.5",
"1,1", "3,1"),
scenario=c("1a","1b")) %>%
separate(study_sds, into=c("study_sd", "study_inter_sd"), sep=",") %>%
mutate(study_sd = as.numeric(study_sd),
study_inter_sd = as.numeric(study_inter_sd),
scenario = factor(scenario, levels=c("1a","1b","2"))) %>%
rbind(c(K=10, n_mean=500, n_sd=0, study_mean=0, study_inter_mean=0, study_sd=NA, study_inter_sd=NA, scenario=2))
settings <- do.call("rbind", replicate(1000, settings_ind, simplify = FALSE)) %>%
cbind(iteration = rep(1:1000, each=11))
i=1
library(tidyverse)
library(causalToolbox)
library(rsample)
library(rpart)
library(ranger)
library(glmnet)
library(grf)
library(fastDummies)
library(lme4)
#settings matrix with all the parameters that vary in each parallel run
settings_ind <- expand.grid(K=c(10),
n_mean=c(500),
n_sd=c(0),
study_mean=c(0),
study_inter_mean=c(0),
study_sds=c("0.5,0", "1,0", "1,0.5",
"1,1", "3,1"),
scenario=c("1a","1b")) %>%
separate(study_sds, into=c("study_sd", "study_inter_sd"), sep=",") %>%
mutate(study_sd = as.numeric(study_sd),
study_inter_sd = as.numeric(study_inter_sd),
scenario = factor(scenario, levels=c("1a","1b","2"))) %>%
rbind(c(K=10, n_mean=500, n_sd=0, study_mean=0, study_inter_mean=0, study_sd=NA, study_inter_sd=NA, scenario=2))
settings <- do.call("rbind", replicate(1000, settings_ind, simplify = FALSE)) %>%
cbind(iteration = rep(1:1000, each=11))
iteration <- settings$iteration[i]
K <- settings$K[i]
n_mean <- settings$n_mean[i]
n_sd <- settings$n_sd[i]
study_mean <- settings$study_mean[i]
study_inter_mean <- settings$study_inter_mean[i]
study_sd <- settings$study_sd[i]
study_inter_sd <- settings$study_inter_sd[i]
scenario <- settings$scenario[i]
seed <- i + 100000
honesty <- F
#generate data
sim_dat <- gen_data(K, n_mean, n_sd, study_mean, study_inter_mean,
study_sd, study_inter_sd, scenario)
covars <- grep("^X", names(sim_dat), value=TRUE)
feat <- select(sim_dat, c(S,all_of(covars))) %>%
fastDummies::dummy_cols(select_columns="S", remove_selected_columns=T)
feat_nostudy <- select(sim_dat, all_of(covars))
tr <- sim_dat$W
y <- sim_dat$Y
tau_true <- sim_dat$tau
#no study
x_rf_nostudy <- X_RF(feat=feat_nostudy, tr=tr, yobs=y, nthread=3)
set.seed(100)
age <- runif(1000000, 25, 60)
age
sds1 <- c()
sds2 <- c()
sds1 <- c()
sds2 <- c()
for (i in 1:100) {
sample_small <- sample(age, 20)
sample_large <- sample(age, 1000)
sds1[i] <- sd(sample_small)
sds2[i] <- sd(sample_large)
}
sds1
sds2
summary(sds1)
summary(sds2)
library(tidyverse)
library(causalToolbox)
library(rsample)
library(rpart)
library(ranger)
library(glmnet)
library(grf)
library(fastDummies)
library(lme4)
#settings matrix with all the parameters that vary in each parallel run
settings_ind <- expand.grid(K=c(10),
n_mean=c(500),
n_sd=c(0),
study_mean=c(0),
study_inter_mean=c(0),
study_sds=c("0.5,0", "1,0", "1,0.5",
"1,1", "3,1"),
scenario=c("1a","1b")) %>%
separate(study_sds, into=c("study_sd", "study_inter_sd"), sep=",") %>%
mutate(study_sd = as.numeric(study_sd),
study_inter_sd = as.numeric(study_inter_sd),
scenario = factor(scenario, levels=c("1a","1b","2"))) %>%
rbind(c(K=10, n_mean=500, n_sd=0, study_mean=0, study_inter_mean=0, study_sd=NA, study_inter_sd=NA, scenario=2))
settings <- do.call("rbind", replicate(1000, settings_ind, simplify = FALSE)) %>%
cbind(iteration = rep(1:1000, each=11))
#sets the row of the settings that you will use
i=as.numeric(Sys.getenv('SGE_TASK_ID'))
i=1
iteration <- settings$iteration[i]
K <- settings$K[i]
n_mean <- settings$n_mean[i]
n_sd <- settings$n_sd[i]
study_mean <- settings$study_mean[i]
study_inter_mean <- settings$study_inter_mean[i]
study_sd <- settings$study_sd[i]
study_inter_sd <- settings$study_inter_sd[i]
scenario <- settings$scenario[i]
seed <- i + 100000
honesty <- F
#now code
source("Comparing_methods_functions.R", local=T)
source("Simulation_MLOptions.R", local=T)
set.seed(seed)
#generate data
sim_dat <- gen_data(K, n_mean, n_sd, study_mean, study_inter_mean,
study_sd, study_inter_sd, scenario)
covars <- grep("^X", names(sim_dat), value=TRUE)
feat <- select(sim_dat, c(S,all_of(covars))) %>%
fastDummies::dummy_cols(select_columns="S", remove_selected_columns=T)
feat_nostudy <- select(sim_dat, all_of(covars))
tr <- sim_dat$W
y <- sim_dat$Y
tau_true <- sim_dat$tau
mixed_mod <- lmer(Y ~ W*X1 + W*X2 + W*X3 + W*X4 + W*X5 + (1|S), data=sim_dat) #naive
sim_dat_trt <- mutate(sim_dat, W=1)
sim_dat_cntrl <- mutate(sim_dat, W=0)
cate_ma <- predict(mixed_mod, sim_dat_trt) - predict(mixed_mod, sim_dat_cntrl)
ma <- mean((cate_ma - tau_true)^2)
ma
summary(mixed_mod)
mixed_mod <- lmer(Y ~ (W*X1|S) + (W*X2|S) + (W*X3|S) + (W*X4|S) + (W*X5|S) + (1|S), data=sim_dat) #naive
mixed_mod2 <- lmer(Y ~ W + X1 + X2 + X3 + X4 + X5 +
(W:X1|S) + (W:X2|S) + (W:X3|S) + (W:X4|S) + (W:X5|S) +
(1|S), data=sim_dat)
summary(mixed_mod2)
mixed_mod2 <- lmer(Y ~ W + X1 + X2 + X3 + X4 + X5 +
(1 + W:X1 + W:X2 + W:X3 + W:X4 + W:X5|S), data=sim_dat)
summary(mixed_mod2)
settings
i=4
iteration <- settings$iteration[i]
K <- settings$K[i]
n_mean <- settings$n_mean[i]
n_sd <- settings$n_sd[i]
study_mean <- settings$study_mean[i]
study_inter_mean <- settings$study_inter_mean[i]
study_sd <- settings$study_sd[i]
study_inter_sd <- settings$study_inter_sd[i]
scenario <- settings$scenario[i]
seed <- i + 100000
honesty <- F
#generate data
sim_dat <- gen_data(K, n_mean, n_sd, study_mean, study_inter_mean,
study_sd, study_inter_sd, scenario)
covars <- grep("^X", names(sim_dat), value=TRUE)
feat <- select(sim_dat, c(S,all_of(covars))) %>%
fastDummies::dummy_cols(select_columns="S", remove_selected_columns=T)
feat_nostudy <- select(sim_dat, all_of(covars))
tr <- sim_dat$W
y <- sim_dat$Y
tau_true <- sim_dat$tau
mixed_mod <- lmer(Y ~ W*X1 + W*X2 + W*X3 + W*X4 + W*X5 + (1|S), data=sim_dat) #naive
sim_dat_trt <- mutate(sim_dat, W=1)
sim_dat_cntrl <- mutate(sim_dat, W=0)
cate_ma <- predict(mixed_mod, sim_dat_trt) - predict(mixed_mod, sim_dat_cntrl)
ma <- mean((cate_ma - tau_true)^2)
ma
mixed_mod2 <- lmer(Y ~ W + X1 + X2 + X3 + X4 + X5 +
(1 + W:X1 + W:X2 + W:X3 + W:X4 + W:X5|S), data=sim_dat)
cate_ma2 <- predict(mixed_mod2, sim_dat_trt) - predict(mixed_mod2, sim_dat_cntrl)
ma2 <- mean((cate_ma2 - tau_true)^2)
ma2
summary(mixed_mod2)
nrow(settings)
library(tidyverse)
library(causalToolbox)
library(rsample)
library(rpart)
library(ranger)
library(glmnet)
library(grf)
library(fastDummies)
library(lme4)
#settings matrix with all the parameters that vary in each parallel run
settings_ind <- expand.grid(K=c(10),
n_mean=c(500),
n_sd=c(0),
study_mean=c(0),
study_inter_mean=c(0),
study_sds=c("0.5,0", "1,0", "1,0.5",
"1,1", "3,1"),
scenario=c("1a","1b")) %>%
separate(study_sds, into=c("study_sd", "study_inter_sd"), sep=",") %>%
mutate(study_sd = as.numeric(study_sd),
study_inter_sd = as.numeric(study_inter_sd),
scenario = factor(scenario, levels=c("1a","1b","2"))) %>%
rbind(c(K=10, n_mean=500, n_sd=0, study_mean=0, study_inter_mean=0, study_sd=NA, study_inter_sd=NA, scenario=2))
settings <- do.call("rbind", replicate(1000, settings_ind, simplify = FALSE)) %>%
cbind(iteration = rep(1:1000, each=11))
i=4
iteration <- settings$iteration[i]
K <- settings$K[i]
n_mean <- settings$n_mean[i]
n_sd <- settings$n_sd[i]
study_mean <- settings$study_mean[i]
study_inter_mean <- settings$study_inter_mean[i]
study_sd <- settings$study_sd[i]
study_inter_sd <- settings$study_inter_sd[i]
scenario <- settings$scenario[i]
seed <- i + 100000
honesty <- F
#now code
source("Comparing_methods_functions.R", local=T)
source("Simulation_MLOptions.R", local=T)
#generate data
sim_dat <- gen_data(K, n_mean, n_sd, study_mean, study_inter_mean,
study_sd, study_inter_sd, scenario)
covars <- grep("^X", names(sim_dat), value=TRUE)
feat <- select(sim_dat, c(S,all_of(covars))) %>%
fastDummies::dummy_cols(select_columns="S", remove_selected_columns=T)
feat_nostudy <- select(sim_dat, all_of(covars))
tr <- sim_dat$W
y <- sim_dat$Y
tau_true <- sim_dat$tau
mixed_mod2 <- lmer(Y ~ W + X1 + X2 + X3 + X4 + X5 +
(1 + W:X1 + W:X2 + W:X3 + W:X4 + W:X5|S), data=sim_dat)
sim_dat_trt <- mutate(sim_dat, W=1)
sim_dat_cntrl <- mutate(sim_dat, W=0)
cate_ma <- predict(mixed_mod, sim_dat_trt) - predict(mixed_mod, sim_dat_cntrl)
ma <- mean((cate_ma - tau_true)^2)
cate_ma <- predict(mixed_mod2, sim_dat_trt) - predict(mixed_mod2, sim_dat_cntrl)
ma <- mean((cate_ma - tau_true)^2)
ma
#no study
tau_forest_nostudy <- causal_forest(X=feat_nostudy, Y=y, W=tr, num.threads=3, honesty=honesty, num.trees=1000)
tau_hat_nostudy <- predict(tau_forest_nostudy)$predictions
causal_nostudy <- mean((tau_hat_nostudy - tau_true)^2)
causal_nostudy
#study indicator
tau_forest <- causal_forest(X=feat, Y=y, W=tr, num.threads=3, honesty=honesty, num.trees=1000)
tau_hat <- predict(tau_forest)$predictions
causal_studyind <- mean((tau_hat - tau_true)^2)
causal_studyind
#tan
causal_tan <- tan_preds(K, sim_dat, covars, "causalforest", honesty=honesty)
causal_tree <- causal_tan["mse_tree"]
causal_forest <- causal_tan["mse_forest"]
causal_lasso <- causal_tan["mse_lasso"]
causal_tree
causal_forest
causal_lasso
mixed_mod <- lmer(Y ~ W*X1 + W*X2 + W*X3 + W*X4 + W*X5 + (1|S), data=sim_dat) #naive
sim_dat_trt <- mutate(sim_dat, W=1)
sim_dat_cntrl <- mutate(sim_dat, W=0)
cate_ma <- predict(mixed_mod, sim_dat_trt) - predict(mixed_mod, sim_dat_cntrl)
ma <- mean((cate_ma - tau_true)^2)
ma
#generate data
sim_dat <- gen_data(K, n_mean, n_sd, study_mean, study_inter_mean,
study_sd, study_inter_sd, scenario)
covars <- grep("^X", names(sim_dat), value=TRUE)
feat <- select(sim_dat, c(S,all_of(covars))) %>%
fastDummies::dummy_cols(select_columns="S", remove_selected_columns=T)
feat_nostudy <- select(sim_dat, all_of(covars))
tr <- sim_dat$W
y <- sim_dat$Y
tau_true <- sim_dat$tau
mixed_mod <- lmer(Y ~ W*X1 + W*X2 + W*X3 + W*X4 + W*X5 + (1|S), data=sim_dat) #naive
mixed_mod2 <- lmer(Y ~ W + X1 + X2 + X3 + X4 + X5 +
(1 + W:X1 + W:X2 + W:X3 + W:X4 + W:X5|S), data=sim_dat)
sim_dat_trt <- mutate(sim_dat, W=1)
sim_dat_cntrl <- mutate(sim_dat, W=0)
cate_ma <- predict(mixed_mod, sim_dat_trt) - predict(mixed_mod, sim_dat_cntrl)
ma <- mean((cate_ma - tau_true)^2)
ma
cate_ma <- predict(mixed_mod2, sim_dat_trt) - predict(mixed_mod2, sim_dat_cntrl)
ma <- mean((cate_ma2 - tau_true)^2)
cate_ma <- predict(mixed_mod2, sim_dat_trt) - predict(mixed_mod2, sim_dat_cntrl)
ma <- mean((cate_ma - tau_true)^2)
ma
#settings matrix with all the parameters that vary in each parallel run
settings_ind <- expand.grid(K=c(10),
n_mean=c(500),
n_sd=c(0),
study_mean=c(0),
study_inter_mean=c(0),
study_sds=c("0.5,0", "1,0", "1,0.5",
"1,1", "3,1"),
scenario=c("1a","1b")) %>%
separate(study_sds, into=c("study_sd", "study_inter_sd"), sep=",") %>%
mutate(study_sd = as.numeric(study_sd),
study_inter_sd = as.numeric(study_inter_sd),
scenario = factor(scenario, levels=c("1a","1b","2"))) %>%
rbind(c(K=10, n_mean=500, n_sd=0, study_mean=0, study_inter_mean=0, study_sd=NA, study_inter_sd=NA, scenario=2))
settings <- do.call("rbind", replicate(1000, settings_ind, simplify = FALSE)) %>%
cbind(iteration = rep(1:1000, each=11))
library(tidyverse)
library(causalToolbox)
library(rsample)
library(rpart)
library(ranger)
library(glmnet)
library(grf)
library(fastDummies)
library(lme4)
#settings matrix with all the parameters that vary in each parallel run
settings_ind <- expand.grid(K=c(10),
n_mean=c(500),
n_sd=c(0),
study_mean=c(0),
study_inter_mean=c(0),
study_sds=c("0.5,0", "1,0", "1,0.5",
"1,1", "3,1"),
scenario=c("1a","1b")) %>%
separate(study_sds, into=c("study_sd", "study_inter_sd"), sep=",") %>%
mutate(study_sd = as.numeric(study_sd),
study_inter_sd = as.numeric(study_inter_sd),
scenario = factor(scenario, levels=c("1a","1b","2"))) %>%
rbind(c(K=10, n_mean=500, n_sd=0, study_mean=0, study_inter_mean=0, study_sd=NA, study_inter_sd=NA, scenario=2))
settings <- do.call("rbind", replicate(1000, settings_ind, simplify = FALSE)) %>%
cbind(iteration = rep(1:1000, each=11))
i=4
iteration <- settings$iteration[i]
K <- settings$K[i]
n_mean <- settings$n_mean[i]
n_sd <- settings$n_sd[i]
study_mean <- settings$study_mean[i]
study_inter_mean <- settings$study_inter_mean[i]
study_sd <- settings$study_sd[i]
study_inter_sd <- settings$study_inter_sd[i]
scenario <- settings$scenario[i]
seed <- i + 100000
honesty <- F
#now code
source("Comparing_methods_functions.R", local=T)
source("Simulation_MLOptions.R", local=T)
#generate data
sim_dat <- gen_data(K, n_mean, n_sd, study_mean, study_inter_mean,
study_sd, study_inter_sd, scenario)
covars <- grep("^X", names(sim_dat), value=TRUE)
feat <- select(sim_dat, c(S,all_of(covars))) %>%
fastDummies::dummy_cols(select_columns="S", remove_selected_columns=T)
feat_nostudy <- select(sim_dat, all_of(covars))
tr <- sim_dat$W
y <- sim_dat$Y
tau_true <- sim_dat$tau
#tan
causal_tan <- tan_preds(K, sim_dat, covars, "causalforest", honesty=honesty)
causal_tree <- causal_tan["mse_tree"]
causal_forest <- causal_tan["mse_forest"]
causal_lasso <- causal_tan["mse_lasso"]
causal_tree
causal_forest
causal_lasso
source("Comparing_methods_functions.R")
source("Comparing_methods_functions.R")
#tan
causal_tan <- tan_preds(K, sim_dat, covars, "causalforest", honesty=honesty)
causal_tree <- causal_tan["mse_tree"]
causal_forest <- causal_tan["mse_forest"]
causal_lasso <- causal_tan["mse_lasso"]
causal_tree
causal_forest
causal_lasso
install.packages("tipr")
#install.packages("tipr")
library(tipr)
library(WeightIt)
