})
all <- do.call("bind_rows", mylist)
return(all)
}
#load in files
all <- read_files("~/Desktop/Cluster/MLSims_Revisions/23MayResults")
nrow(all) #to make sure every iteration ran
nrow(all %>% select(-iteration) %>% distinct())
length(unique(all$seed)) #to make sure there are no duplicates
#checking number of iterations
table(all$scenario)
all <- all %>%
mutate(scenario = factor(scenario, levels=c("1a","1b","2")),
sc_combo = paste(K, ns, cov_shift, study_sd, study_inter_sd, scenario, sep="_"),
sc_combo = factor(sc_combo))
table(all$sc_combo)
#get means and sds per setting
mses <- all %>%
group_by(K, ns, cov_shift, study_sd, study_inter_sd, scenario, honesty, sc_combo) %>%
summarise(across(x_nostudy:ma, list(mean=mean, sd=sd)),
n_iter = n())
mses_long <- all %>%
group_by(K, ns, cov_shift, study_sd, study_inter_sd, scenario, honesty, sc_combo) %>%
summarise(across(x_nostudy:ma, mean)) %>%
pivot_longer(cols=x_nostudy:ma,
names_to="Method",
values_to="MSE") %>%
mutate(MSE = as.numeric(MSE),
base = case_when(grepl("x_",Method)==T ~ "X-Learner",
grepl("s_",Method)==T ~ "S-Learner",
grepl("causal_",Method)==T ~ "Causal Forest",
grepl("ma",Method)==T ~ "Meta-Analysis"),
ensemble = case_when(grepl("nostudy",Method)==T ~ "Complete Pooling",
grepl("studyind",Method)==T ~ "Trial Indicator",
grepl("tree", Method)==T ~ "Ensemble Tree",
grepl("forest",Method)==T ~ "Ensemble Forest",
grepl("lasso",Method)==T ~ "Ensemble Lasso",
grepl("ss",Method)==T ~ "No Pooling",
grepl("ma",Method)==T ~ "Meta-Analysis"),
base = factor(base, levels=c("S-Learner", "X-Learner", "Causal Forest", "Meta-Analysis")),
ensemble = factor(ensemble, levels=c("Complete Pooling", "Trial Indicator", "Ensemble Tree",
"Ensemble Forest","Ensemble Lasso", "Meta-Analysis", "No Pooling")),
sds = factor(paste(study_sd, study_inter_sd, sep=", ")),
scenario = ifelse(scenario=="1a", "Piecewise Linear CATE",
ifelse(scenario=="1b", "Non-linear CATE",
"Variable CATE")),
scenario = factor(scenario, levels=c("Piecewise Linear CATE",
"Non-linear CATE",
"Variable CATE")))
#scatterplot option
mses_long %>%
filter(cov_shift == "no", ns=="same", K==10, scenario != "Variable CATE") %>%
ggplot(aes(x=sds, y=MSE, group=Method, color=ensemble)) +
geom_jitter(aes(shape=base), size=2.5, width=.2, height=0) +
#geom_line() +
facet_wrap(~scenario, scales='free') +
scale_x_discrete(labels = c("Low-Low","Med-Low", "Med-Med", "Med-High","High-High")) +
scale_y_continuous(limits = c(0, 2.1)) +
labs(shape="Single-Study Method", color="Aggregation Method") +
guides(shape=guide_legend(order=1), color=guide_legend(order=2)) +
#theme(axis.text.x = element_text(angle = 45)) +
xlab("SD of Study Main and Study Interaction Coefficients") +
theme(text = element_text(size=12))
#Figure 1 boxplot option
all_long <- all %>%
pivot_longer(cols=x_nostudy:ma,
names_to="Method",
values_to="MSE") %>%
mutate(MSE = as.numeric(MSE),
base = case_when(grepl("x_",Method)==T ~ "X-Learner",
grepl("s_",Method)==T ~ "S-Learner",
grepl("causal_",Method)==T ~ "Causal Forest",
grepl("ma",Method)==T ~ "Meta-Analysis"),
ensemble = case_when(grepl("nostudy",Method)==T ~ "Complete Pooling",
grepl("studyind",Method)==T ~ "Trial Indicator",
grepl("tree", Method)==T ~ "Ensemble Tree",
grepl("forest",Method)==T ~ "Ensemble Forest",
grepl("lasso",Method)==T ~ "Ensemble Lasso",
grepl("ss",Method)==T ~ "No Pooling",
grepl("ma",Method)==T ~ "Meta-Analysis"),
base = factor(base, levels=c("S-Learner", "X-Learner", "Causal Forest", "Meta-Analysis")),
ensemble = factor(ensemble, levels=c("Complete Pooling", "Trial Indicator", "Ensemble Tree",
"Ensemble Forest","Ensemble Lasso", "Meta-Analysis", "No Pooling")),
sds = factor(paste(study_sd, study_inter_sd, sep=", ")),
scenario = ifelse(scenario=="1a", "Piecewise Linear CATE",
ifelse(scenario=="1b", "Non-linear CATE",
"Variable CATE")),
scenario = factor(scenario, levels=c("Piecewise Linear CATE",
"Non-linear CATE",
"Variable CATE")))
#removing scenario 2 (variable CATE)
all_long %>%
filter(cov_shift == "no", ns=="same", K==10, scenario != "Variable CATE") %>%
ggplot(aes(x=ensemble, y=MSE)) +
geom_boxplot(aes(color=base)) +
facet_grid(sds~scenario, scales='free') +
#scale_y_continuous(limits = c(0, 2.1)) +
labs(color="Single-Study Method") + xlab("Aggregation Method") +
theme(axis.text.x = element_text(angle=90),
text = element_text(size=12))
all_long %>%
filter(cov_shift == "no", K==10, sds=="1, 0.5") %>%
ggplot(aes(x=ensemble, y=MSE)) +
geom_boxplot(aes(color=base)) +
facet_grid(ns~scenario) +
#scale_y_continuous(limits = c(0, 2.1)) +
labs(color="Single-Study Method") + xlab("Aggregation Method") +
theme(axis.text.x = element_text(angle=90),
text = element_text(size=12))
all_long %>%
filter(K==30) %>%
ggplot(aes(x=ensemble, y=MSE)) +
geom_boxplot(aes(color=base)) +
facet_wrap(~scenario) +
#scale_y_continuous(limits = c(0, 2.1)) +
labs(color="Single-Study Method") + xlab("Aggregation Method") +
ggtitle("K=30") +
theme(axis.text.x = element_text(angle=90),
text = element_text(size=12))
all_long %>%
filter(cov_shift=="yes") %>%
ggplot(aes(x=ensemble, y=MSE)) +
geom_boxplot(aes(color=base)) +
facet_grid(ns~scenario) +
#scale_y_continuous(limits = c(0, 2.1)) +
labs(color="Single-Study Method") + xlab("Aggregation Method") +
theme(axis.text.x = element_text(angle=90),
text = element_text(size=12))
all_long %>%
filter(scenario == "Variable CATE") %>%
ggplot(aes(x=ensemble, y=MSE)) +
geom_boxplot(aes(color=base)) +
facet_wrap(~ns) +
#scale_y_continuous(limits = c(0, 2.1)) +
labs(color="Single-Study Method") + xlab("Aggregation Method") +
theme(axis.text.x = element_text(angle=90),
text = element_text(size=12))
all_long %>%
filter(K==15) %>%
ggplot(aes(x=ensemble, y=MSE)) +
geom_boxplot(aes(color=base)) +
facet_wrap(~scenario) +
#scale_y_continuous(limits = c(0, 2.1)) +
labs(color="Single-Study Method") + xlab("Aggregation Method") +
ggtitle("K=30") +
theme(axis.text.x = element_text(angle=90),
text = element_text(size=12))
all_long %>%
filter(K==30) %>%
ggplot(aes(x=ensemble, y=MSE)) +
geom_boxplot(aes(color=base)) +
facet_wrap(~scenario) +
#scale_y_continuous(limits = c(0, 2.1)) +
labs(color="Single-Study Method") + xlab("Aggregation Method") +
ggtitle("K=30") +
theme(axis.text.x = element_text(angle=90),
text = element_text(size=12))
all_long %>%
filter(K==15) %>%
ggplot(aes(x=ensemble, y=MSE)) +
geom_boxplot(aes(color=base)) +
facet_wrap(~scenario) +
#scale_y_continuous(limits = c(0, 2.1)) +
labs(color="Single-Study Method") + xlab("Aggregation Method") +
ggtitle("K=30") +
theme(axis.text.x = element_text(angle=90),
text = element_text(size=12))
library(tidyverse)
library(causalToolbox)
library(causalToolbox)
library(rsample)
library(rpart)
library(ranger)
library(glmnet)
library(grf)
library(fastDummies)
library(lme4)
## Settings matrix with all the parameters that vary in each parallel run
settings_og <- expand.grid(K=c(10),
ns=c("same"),
cov_shift=c("no"),
study_sds=c("0.5,0", "1,0", "1,0.5",
"1,1", "3,1"),
scenario=c("1a","1b")) %>%
separate(study_sds, into=c("study_sd", "study_inter_sd"), sep=",") %>%
mutate(ns = factor(ns, levels=c("same","one large","half and half")),
cov_shift = factor(cov_shift, levels=c("no","yes")),
scenario = factor(scenario, levels=c("1a","1b","2"))) %>%
rbind(c(K=10, ns="same", cov_shift="no", study_sd=NA, study_inter_sd=NA, scenario="2"))
settings_new <- expand.grid(K=c(10),
ns=c("one large", "half and half"),
cov_shift=c("no"),
study_sd=1,
study_inter_sd=0.5,
scenario=c("1a","1b")) %>%
mutate(ns = factor(ns, levels=c("same","one large","half and half")),
cov_shift = factor(cov_shift, levels=c("no","yes")),
scenario = factor(scenario, levels=c("1a","1b","2"))) %>%
rbind(c(K=10, ns="one large", cov_shift="no", study_sd=NA, study_inter_sd=NA, scenario="2"),
c(K=10, ns="half and half", cov_shift="no", study_sd=NA, study_inter_sd=NA, scenario="2"),
c(K=10, ns="same", cov_shift="yes", study_sd=1, study_inter_sd=0.5, scenario="1a"),
c(K=10, ns="one large", cov_shift="yes", study_sd=1, study_inter_sd=0.5, scenario="1a"),
c(K=10, ns="same", cov_shift="yes", study_sd=1, study_inter_sd=0.5, scenario="1b"),
c(K=10, ns="one large", cov_shift="yes", study_sd=1, study_inter_sd=0.5, scenario="1b"),
c(K=30, ns="same", cov_shift="no", study_sd=1, study_inter_sd=0.5, scenario="1a"),
c(K=30, ns="same", cov_shift="no", study_sd=1, study_inter_sd=0.5, scenario="1b"))
settings_combo <- settings_og %>%
rbind(settings_new) %>%
mutate(K = as.numeric(K),
study_sd = as.numeric(study_sd),
study_inter_sd = as.numeric(study_inter_sd))
settings <- do.call("rbind", replicate(1000, settings_combo, simplify = FALSE)) %>%
cbind(iteration = rep(1:1000, each=nrow(settings_combo)))
## Settings matrix with all the parameters that vary in each parallel run
settings_og <- expand.grid(K=c(10),
ns=c("same"),
cov_shift=c("no"),
study_sds=c("0.5,0", "1,0", "1,0.5",
"1,1", "3,1"),
scenario=c("1a","1b")) %>%
separate(study_sds, into=c("study_sd", "study_inter_sd"), sep=",") %>%
mutate(ns = factor(ns, levels=c("same","one large","half and half")),
cov_shift = factor(cov_shift, levels=c("no","yes")),
scenario = factor(scenario, levels=c("1a","1b","2"))) %>%
rbind(c(K=10, ns="same", cov_shift="no", study_sd=NA, study_inter_sd=NA, scenario="2"))
settings_new <- expand.grid(K=c(10),
ns=c("one large", "half and half"),
cov_shift=c("no"),
study_sd=1,
study_inter_sd=0.5,
scenario=c("1a","1b")) %>%
mutate(ns = factor(ns, levels=c("same","one large","half and half")),
cov_shift = factor(cov_shift, levels=c("no","yes")),
scenario = factor(scenario, levels=c("1a","1b","2"))) %>%
rbind(c(K=10, ns="one large", cov_shift="no", study_sd=NA, study_inter_sd=NA, scenario="2"),
c(K=10, ns="half and half", cov_shift="no", study_sd=NA, study_inter_sd=NA, scenario="2"),
c(K=10, ns="same", cov_shift="yes", study_sd=1, study_inter_sd=0.5, scenario="1a"),
c(K=10, ns="one large", cov_shift="yes", study_sd=1, study_inter_sd=0.5, scenario="1a"),
c(K=10, ns="same", cov_shift="yes", study_sd=1, study_inter_sd=0.5, scenario="1b"),
c(K=10, ns="one large", cov_shift="yes", study_sd=1, study_inter_sd=0.5, scenario="1b"),
c(K=30, ns="same", cov_shift="no", study_sd=0.5, study_inter_sd=0, scenario="1a"),
c(K=30, ns="same", cov_shift="no", study_sd=0.5, study_inter_sd=0, scenario="1b"))
settings_combo <- settings_og %>%
rbind(settings_new) %>%
mutate(K = as.numeric(K),
study_sd = as.numeric(study_sd),
study_inter_sd = as.numeric(study_inter_sd))
settings <- do.call("rbind", replicate(1000, settings_combo, simplify = FALSE)) %>%
cbind(iteration = rep(1:1000, each=nrow(settings_combo)))
head(settings)
head(settings, 30)
i=22
iteration <- settings$iteration[i]
study_mean <- 0
study_inter_mean <- 0
K <- settings$K[i]
ns <- settings$ns[i]
cov_shift <- settings$cov_shift[i]
study_sd <- settings$study_sd[i]
study_inter_sd <- settings$study_inter_sd[i]
scenario <- settings$scenario[i]
seed <- i
honesty <- F
K
study_sd
## Run code
source("R/Comparing_methods_functions.R", local=T)
source("R/Simulation_MLOptions.R", local=T)
set.seed(seed)
#generate data
sim_dat <- gen_data(K, ns, cov_shift, study_mean, study_inter_mean,
study_sd, study_inter_sd, scenario)
View(sim_dat)
ncovar=5
sd=sqrt(0.01)
all_dat <- data.frame()
#change size per trial
if (ns == "same") { n_study <- rep(500, K) }
if (ns == "one large") { n_study <- c(1000, rep(200, K-1)) }
if (ns == "half and half") { n_study <- c(rep(500, K/2), rep(200, K/2)) }
ns
n_study
#study-specific coefficients
if (scenario %in% c("1a","1b")) {
study_main <- rnorm(K, mean=study_mean, sd=study_sd)
study_inter <- rnorm(K, mean=study_inter_mean, sd=study_inter_sd)
}
study_main
summary(study_main)
settings[22,]
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
source("R/Comparing_methods_functions.R", local=T)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
source("Comparing_methods_functions.R")
source("Simulation_MLOptions.R")
source("Simulation_MLOptions.R")
source("Comparing_methods_functions.R")
source("Simulation_MLOptions.R")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
getwd()
source("Comparing_methods_functions.R")
source("Simulation_MLOptions.R")
#try K=30 and check diagnostics
K <- 30
ns <- "same"
cov_shift <- "no"
study_mean <- 0
study_inter_mean <- 0
study_sd <- 0.5
study_inter_sd <- 0
scenario <- "1a"
honesty <- F
iteration <- 1
seed <- 22
#check coefficients
if (scenario %in% c("1a","1b")) {
study_main <- rnorm(K, mean=study_mean, sd=study_sd)
study_inter <- rnorm(K, mean=study_inter_mean, sd=study_inter_sd)
}
summary(study_main)
summary(study_inter)
if (scenario %in% c("1a","1b")) {
study_main <- rnorm(10, mean=study_mean, sd=study_sd)
study_inter <- rnorm(10, mean=study_inter_mean, sd=study_inter_sd)
}
summary(study_main)
summary(study_inter)
plot(study_main)
#check coefficients
if (scenario %in% c("1a","1b")) {
study_main <- rnorm(K, mean=study_mean, sd=study_sd)
study_inter <- rnorm(K, mean=study_inter_mean, sd=study_inter_sd)
}
summary(study_main)
plot(study_main)
summary(study_inter)
plot(study_main)
if (scenario %in% c("1a","1b")) {
study_main <- rnorm(10, mean=study_mean, sd=study_sd)
study_inter <- rnorm(10, mean=study_inter_mean, sd=study_inter_sd)
}
plot(study_main)
#check coefficients
if (scenario %in% c("1a","1b")) {
study_main <- rnorm(K, mean=study_mean, sd=study_sd)
study_inter <- rnorm(K, mean=study_inter_mean, sd=study_inter_sd)
}
summary(study_main)
plot(study_main)
plot(study_main)
#compare with K=10
if (scenario %in% c("1a","1b")) {
study_main <- rnorm(10, mean=study_mean, sd=study_sd)
study_inter <- rnorm(10, mean=study_inter_mean, sd=study_inter_sd)
}
summary(study_main)
plot(study_main)
all_dat <- data.frame()
#change size per trial
if (ns == "same") { n_study <- rep(500, K) }
if (ns == "one large") { n_study <- c(1000, rep(200, K-1)) }
if (ns == "half and half") { n_study <- c(rep(500, K/2), rep(200, K/2)) }
#study-specific coefficients
if (scenario %in% c("1a","1b")) {
study_main <- rnorm(K, mean=study_mean, sd=study_sd)
study_inter <- rnorm(K, mean=study_inter_mean, sd=study_inter_sd)
}
study_main
for (k in 1:K) {
n <- n_study[k]
#sample covariates
Sigma <- matrix(.2, nrow=ncovar, ncol=ncovar)
diag(Sigma) <- 1
if (cov_shift == "no") {
dat <- MASS::mvrnorm(n=n, mu=rep(0,ncovar), Sigma=Sigma) %>% data.frame()
}
if (cov_shift == "yes") {
if (k %% 2 == 0) { dat <- MASS::mvrnorm(n=n, mu=rep(0,ncovar), Sigma=Sigma) %>% data.frame() }
else { dat <- MASS::mvrnorm(n=n, mu=c(2,rep(0,ncovar-1)), Sigma=Sigma) %>% data.frame() }
}
#treatment
dat$W <- rbinom(n, size=1, prob=0.5)
#study and id
dat$S <- rep(k, n)
dat$id <- seq(1, n)
#noise
dat$eps <- rnorm(n, mean=0, sd=sd)
all_dat <- bind_rows(all_dat, dat)
}
View(all_dat)
#tau and Y
if (scenario == "1a") {
all_dat$m <- all_dat$X1/2 + all_dat$X2 + all_dat$X3 + all_dat$X4 +
study_main[all_dat$S] + study_inter[all_dat$S]*all_dat$X1
all_dat$tau <- all_dat$X1*(all_dat$X1>0) + study_main[all_dat$S] +
study_inter[all_dat$S]*all_dat$X1
}
if (scenario == "1b") {
all_dat$m <- 0
all_dat$tau <- (2/(1+exp(-12*(all_dat$X1-1/2))))*(2/(1+exp(-12*(all_dat$X2-1/2)))) +
study_main[all_dat$S] + study_inter[all_dat$S]*all_dat$X1
}
if (scenario == "2") {
all_dat$m <- all_dat$X1/2 + all_dat$X2 + all_dat$X3 + all_dat$X4
all_dat$tau <- ifelse(all_dat$S %in% c(1:4), (2/(1+exp(-12*(all_dat$X1-1/2))))*(2/(1+exp(-12*(all_dat$X2-1/2)))),
ifelse(all_dat$S %in% c(5:8), all_dat$X1*(all_dat$X1>0), 0))
}
all_dat$Y <- all_dat$m + (2*all_dat$W-1)/2*all_dat$tau + all_dat$eps
hist(all_dat$m)
ggplot(all_dat, aes(x=m, color=S)) + geom_density()
ggplot(all_dat, aes(x=m, group=S, color=S)) + geom_density()
ggplot(all_dat, aes(x=tau, group=S, color=S)) + geom_density()
ggplot(all_dat, aes(x=Y, group=S, color=S)) + geom_density()
#check true taus
sim_dat <- gen_data(K, ns, cov_shift, study_mean, study_inter_mean,
study_sd, study_inter_sd, scenario)
head(sim_dat)
nrow(sim_dat)
ggplot(sim_dat, aes(x=tau, group=S, color=S)) + geom_density()
#compare with K=10
sim_dat_10 <- gen_data(K=10, ns, cov_shift, study_mean, study_inter_mean,
study_sd, study_inter_sd, scenario)
ggplot(sim_dat_10, aes(x=tau, group=S, color=S)) + geom_density()
#fit causal forest
covars <- grep("^X", names(sim_dat), value=TRUE)
feat <- select(sim_dat, c(S,all_of(covars))) %>%
fastDummies::dummy_cols(select_columns="S", remove_selected_columns=T)
head(feat)
feat_nostudy <- select(sim_dat, all_of(covars))
tr <- sim_dat$W
y <- sim_dat$Y
tau_true <- sim_dat$tau
tau_forest <- causal_forest(X=feat, Y=y, W=tr, num.threads=3, honesty=honesty, num.trees=1000)
tau_forest
variable_importance(tau_forest)
tau_hat <- c(tau_forest$predictions)
tau_hat %>%
cbind(tau_forest) %>%
ggplot(aes(x=tau_true, y=tau_hat)) +
geom_point()
tau_hat %>%
cbind(tau_true) %>%
ggplot(aes(x=tau_true, y=tau_hat)) +
geom_point()
data.frame(tau_hat=tau_hat, tau_true=tau_true) %>%
ggplot(aes(x=tau_true, y=tau_hat)) +
geom_point()
data.frame(S=sim_dat$S, tau_hat=tau_hat, tau_true=tau_true) %>%
ggplot(aes(x=tau_true, y=tau_hat, color=S)) +
geom_point()
data.frame(S=sim_dat$S, tau_hat=tau_hat, tau_true=tau_true) %>%
ggplot(aes(x=tau_true, y=tau_hat, color=S)) +
geom_point() +
geom_abline(y=x)
data.frame(S=sim_dat$S, tau_hat=tau_hat, tau_true=tau_true) %>%
ggplot(aes(x=tau_true, y=tau_hat, color=S)) +
geom_point() +
geom_abline(slope=1, intercept=0)
print(paste0("MSE for K=30 is ",mean((tau_hat - tau_true)^2))
print(paste0("MSE for K=30 is ",mean((tau_hat - tau_true)^2))
print(paste0("MSE for K=30 is ",mean((tau_hat - tau_true)^2)))
print(paste0("MSE for K=30 is ", round(mean((tau_hat - tau_true)^2)),3))
print(paste0("MSE for K=30 is ", round(mean((tau_hat - tau_true)^2),3)))
#variable importance
variable_importance(tau_forest)
colnames(feat)
#variable importance
data.frame(var = colnames(feat),
importance = variable_importance(tau_forest))
#variable importance
data.frame(var = colnames(feat),
importance = variable_importance(tau_forest)) %>%
ggplot(aes(x=var, y=importance)) +
coord_flip
#variable importance
data.frame(var = colnames(feat),
importance = variable_importance(tau_forest)) %>%
ggplot(aes(x=var, y=importance)) +
geom_bar() +
coord_flip()
#variable importance
data.frame(var = colnames(feat),
importance = variable_importance(tau_forest)) %>%
ggplot(aes(x=var, y=importance)) +
geom_bar(stat="identity") +
coord_flip()
#fit causal forest for K=10
covars <- grep("^X", names(sim_dat_10), value=TRUE)
feat <- select(sim_dat_10, c(S,all_of(covars))) %>%
fastDummies::dummy_cols(select_columns="S", remove_selected_columns=T)
tr <- sim_dat_10$W
y <- sim_dat_10$Y
tau_true <- sim_dat_10$tau
tau_forest <- causal_forest(X=feat, Y=y, W=tr, num.threads=3, honesty=honesty, num.trees=1000)
tau_hat <- c(tau_forest$predictions)
#scatterplot
data.frame(S=sim_dat_10$S, tau_hat=tau_hat, tau_true=tau_true) %>%
ggplot(aes(x=tau_true, y=tau_hat, color=S)) +
geom_point() +
geom_abline(slope=1, intercept=0)
#mse
print(paste0("MSE for K=30 is ", round(mean((tau_hat - tau_true)^2),3)))
#variable importance
data.frame(var = colnames(feat),
importance = variable_importance(tau_forest)) %>%
ggplot(aes(x=var, y=importance)) +
geom_bar(stat="identity") +
coord_flip()
source("Simulation_MLOptions.R", local=T)
