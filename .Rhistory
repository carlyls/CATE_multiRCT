table(all$sc_combo)
library(tidyverse)
read_files <- function (dir) {
setwd(dir)
files <- list.files(pattern="_output_")
mylist <- lapply(files, function(x) {
load(file = x)
get(ls()[ls()!= "filename"])
})
all <- do.call("bind_rows", mylist)
return(all)
}
#load in files
all <- read_files("~/Desktop/Cluster/14FebResults")
nrow(all) #to make sure every iteration ran
nrow(all %>% select(-iteration) %>% distinct())
length(unique(all$seed)) #to make sure there are no duplicates
#checking number of iterations
table(all$scenario)
all <- all %>%
mutate(scenario = factor(scenario, levels=c("1a","1b","2")),
sc_combo = paste(scenario, study_sd, study_inter_sd, sep="_"),
sc_combo = factor(sc_combo))
table(all$sc_combo)
library(tidyverse)
read_files <- function (dir) {
setwd(dir)
files <- list.files(pattern="_output_")
mylist <- lapply(files, function(x) {
load(file = x)
get(ls()[ls()!= "filename"])
})
all <- do.call("bind_rows", mylist)
return(all)
}
#load in files
all <- read_files("~/Desktop/Cluster/14FebResults")
nrow(all) #to make sure every iteration ran
nrow(all %>% select(-iteration) %>% distinct())
length(unique(all$seed)) #to make sure there are no duplicates
#checking number of iterations
table(all$scenario)
all <- all %>%
mutate(scenario = factor(scenario, levels=c("1a","1b","2")),
sc_combo = paste(scenario, study_sd, study_inter_sd, sep="_"),
sc_combo = factor(sc_combo))
table(all$sc_combo)
library(tidyverse)
read_files <- function (dir) {
setwd(dir)
files <- list.files(pattern="_output_")
mylist <- lapply(files, function(x) {
load(file = x)
get(ls()[ls()!= "filename"])
})
all <- do.call("bind_rows", mylist)
return(all)
}
#load in files
all <- read_files("~/Desktop/Cluster/14FebResults")
nrow(all) #to make sure every iteration ran
nrow(all %>% select(-iteration) %>% distinct())
length(unique(all$seed)) #to make sure there are no duplicates
#checking number of iterations
table(all$scenario)
all <- all %>%
mutate(scenario = factor(scenario, levels=c("1a","1b","2")),
sc_combo = paste(scenario, study_sd, study_inter_sd, sep="_"),
sc_combo = factor(sc_combo))
table(all$sc_combo)
library(tidyverse)
read_files <- function (dir) {
setwd(dir)
files <- list.files(pattern="_output_")
mylist <- lapply(files, function(x) {
load(file = x)
get(ls()[ls()!= "filename"])
})
all <- do.call("bind_rows", mylist)
return(all)
}
#load in files
all <- read_files("~/Desktop/Cluster/14FebResults")
nrow(all) #to make sure every iteration ran
nrow(all %>% select(-iteration) %>% distinct())
length(unique(all$seed)) #to make sure there are no duplicates
#checking number of iterations
table(all$scenario)
all <- all %>%
mutate(scenario = factor(scenario, levels=c("1a","1b","2")),
sc_combo = paste(scenario, study_sd, study_inter_sd, sep="_"),
sc_combo = factor(sc_combo))
table(all$sc_combo)
library(tidyverse)
read_files <- function (dir) {
setwd(dir)
files <- list.files(pattern="_output_")
mylist <- lapply(files, function(x) {
load(file = x)
get(ls()[ls()!= "filename"])
})
all <- do.call("bind_rows", mylist)
return(all)
}
#load in files
all <- read_files("~/Desktop/Cluster/14FebResults")
nrow(all) #to make sure every iteration ran
nrow(all %>% select(-iteration) %>% distinct())
length(unique(all$seed)) #to make sure there are no duplicates
#checking number of iterations
table(all$scenario)
all <- all %>%
mutate(scenario = factor(scenario, levels=c("1a","1b","2")),
sc_combo = paste(scenario, study_sd, study_inter_sd, sep="_"),
sc_combo = factor(sc_combo))
table(all$sc_combo)
View(all)
#set up settings
settings <- expand.grid(K=c(10),
n_mean=c(500),
n_sd=c(0),
study_mean=c(0),
study_inter_mean=c(0),
study_sds=c("0.5,0", "1,0", "1,0.5",
"1,1", "3,1"),
scenario=c("1a","1b")) %>%
separate(study_sds, into=c("study_sd", "study_inter_sd"), sep=",") %>%
mutate(study_sd = as.numeric(study_sd),
study_inter_sd = as.numeric(study_inter_sd),
scenario = factor(scenario, levels=c("1a","1b","2"))) %>%
rbind(c(K=10, n_mean=500, n_sd=0, study_mean=0, study_inter_mean=0, study_sd=NA, study_inter_sd=NA, scenario=2)) %>%
mutate(best_col = NA, num_iter = NA)
#make columns for mses
for (i in 1:16) {
settings <- mutate(settings,
name = "NA")
colnames(settings)[length(colnames(settings))] <- colnames(all)[i]
}
#add results in
mean_mses <- sd_mses <- settings
for (i in 1:nrow(mean_mses)) {
if (mean_mses$scenario[i] %in% c("1a","1b")) {
sim_subset <- filter(all, K==mean_mses$K[i], n_mean==mean_mses$n_mean[i], n_sd==mean_mses$n_sd[i],
study_sd==mean_mses$study_sd[i], study_inter_sd==mean_mses$study_inter_sd[i],
scenario==mean_mses$scenario[i]) %>% select(1:16)
} else {
sim_subset <- filter(all, K==mean_mses$K[i], n_mean==mean_mses$n_mean[i], n_sd==mean_mses$n_sd[i],
scenario==mean_mses$scenario[i]) %>% select(1:16)
}
col_means <- colMeans(sim_subset)
col_sds <- apply(sim_subset,2,sd)
mean_mses[i,"best_col"] <- sd_mses[i,"best_col"] <- names(which.min(col_means))
mean_mses[i,"num_iter"] <- sd_mses[i,"num_iter"] <- nrow(sim_subset)
mean_mses[i, grep("x_nostudy",colnames(mean_mses)):ncol(mean_mses)] <- round(col_means,4)
sd_mses[i, grep("x_nostudy",colnames(mean_mses)):ncol(mean_mses)] <- paste(round(col_means,2), " (",
round(col_sds,2), ")", sep="")
}
#make long data for plotting
means_long <- mean_mses %>%
pivot_longer(cols=x_nostudy:ma,
names_to="Method",
values_to="MSE") %>%
mutate(MSE = as.numeric(MSE),
Method = factor(Method, levels=c("x_nostudy","s_nostudy","causal_nostudy",
"x_studyind","s_studyind","causal_studyind",
"x_tree","s_tree","causal_tree",
"x_forest","s_forest","causal_forest",
"x_lasso","s_lasso","causal_lasso","ma")),
base = case_when(grepl("x_",Method)==T ~ "X-Learner",
grepl("s_",Method)==T ~ "S-Learner",
grepl("causal_",Method)==T ~ "Causal Forest",
grepl("ma",Method)==T ~ "Meta-Analysis"),
ensemble = case_when(grepl("nostudy",Method)==T ~ "Complete Pooling",
grepl("studyind",Method)==T ~ "Trial Indicator",
grepl("tree", Method)==T ~ "Ensemble Tree",
grepl("forest",Method)==T ~ "Ensemble Forest",
grepl("lasso",Method)==T ~ "Ensemble Lasso",
grepl("ma",Method)==T ~ "Meta-Analysis"),
base = factor(base, levels=c("S-Learner", "X-Learner", "Causal Forest", "Meta-Analysis")),
ensemble = factor(ensemble, levels=c("Complete Pooling", "Trial Indicator", "Ensemble Tree",
"Ensemble Forest","Ensemble Lasso", "Meta-Analysis")),
sds = paste(study_sd, study_inter_sd, sep=", "), sds = factor(sds),
ns = paste(n_mean, n_sd, sep=", "),
sc_combo = paste(scenario, study_sd, study_inter_sd, sep="_"),
sc_combo = factor(sc_combo))
#double check distribution of each to make sure they make sense
mean_mses %>%
mutate(sc_combo = paste(scenario, study_sd, study_inter_sd, sep="_"),
ma = as.numeric(ma)) %>%
ggplot(aes(x=ma)) +
geom_histogram() +
facet_wrap(~sc_combo)
#double check distribution of each to make sure they make sense
mean_mses %>%
mutate(sc_combo = paste(scenario, study_sd, study_inter_sd, sep="_"),
ma = as.numeric(ma)) %>%
ggplot(aes(x=ma)) +
geom_histogram() +
facet_wrap(~sc_combo, scales="free_x")
means_long %>%
rename(Ensemble = ensemble, Base = base) %>%
mutate(scenario = ifelse(scenario=="1a", "Piecewise Linear CATE",
ifelse(scenario=="1b", "Non-linear CATE",
"Variable CATE")),
scenario = factor(scenario, levels=c("Piecewise Linear CATE",
"Non-linear CATE",
"Variable CATE"))) %>%
ggplot(aes(x=sds, y=MSE, group=Method, color=Ensemble)) +
geom_jitter(aes(shape=Base), size=2.5, width=.2, height=0) +
#geom_line() +
facet_wrap(~scenario, scales='free') +
scale_x_discrete(labels = c("Low-Low","Med-Low", "Med-Med", "Med-High","High-High")) +
scale_y_continuous(limits = c(0, 2.1)) +
labs(shape="Single-Study Method", color="Aggregation Method") +
guides(shape=guide_legend(order=1), color=guide_legend(order=2)) +
#theme(axis.text.x = element_text(angle = 45)) +
xlab("SD of Study Main and Study Interaction Coefficients") +
theme(text = element_text(size=12))
#Figure 1
means_long %>%
rename(Ensemble = ensemble, Base = base) %>%
mutate(scenario = ifelse(scenario=="1a", "Piecewise Linear CATE",
ifelse(scenario=="1b", "Non-linear CATE",
"Variable CATE")),
scenario = factor(scenario, levels=c("Piecewise Linear CATE",
"Non-linear CATE",
"Variable CATE"))) %>%
ggplot(aes(x=sds, y=MSE, group=Method, color=Ensemble)) +
geom_jitter(aes(shape=Base), size=2.5, width=.2, height=0) +
#geom_line() +
facet_wrap(~scenario, scales='free') +
scale_x_discrete(labels = c("Low-Low","Med-Low", "Med-Med", "Med-High","High-High")) +
scale_y_continuous(limits = c(0, 2.1)) +
labs(shape="Single-Study Method", color="Aggregation Method") +
guides(shape=guide_legend(order=1), color=guide_legend(order=2)) +
#theme(axis.text.x = element_text(angle = 45)) +
xlab("SD of Study Main and Study Interaction Coefficients") +
theme(text = element_text(size=12))
ggsave("Plots/MLSims_Fig1_14Feb2023.jpeg",width=14,height=5,units="in")
#Figure 2
means_long %>%
group_by(Method, ensemble, base) %>%
summarise(MSE=mean(MSE)) %>%
ggplot(aes(x=ensemble, y=MSE, group=1, color=base)) +
geom_point(size=5) +
theme(axis.text.x = element_text(angle=45, hjust=1, vjust=1),
plot.margin=margin(10,10,10,30),
text = element_text(size=15)) +
labs(color="Single-Study Approach") +
xlab("Aggregation Approach")
ggsave("Plots/MLSims_Fig2_14Feb2023.jpeg",width=8,height=5,units="in")
## anova
mod_params <- lm(MSE ~ factor(base) + factor(ensemble) + factor(study_sd) +
factor(study_inter_sd) + factor(scenario) +
factor(base)*factor(ensemble),
data=filter(means_long, base != "Meta-Analysis", scenario != 2))
summary(mod_params)
anova(mod_params)
anov <- aov(MSE ~ factor(base) + factor(ensemble) + factor(study_sd) +
factor(study_inter_sd) + factor(scenario) +
factor(base)*factor(ensemble),
data=filter(means_long, base != "Meta-Analysis", scenario != 2))
TukeyHSD(anov, 'factor(base)', conf.level=0.95)
TukeyHSD(anov, 'factor(ensemble)', conf.level=0.95)
TukeyHSD(anov, 'factor(study_sd)', conf.level=0.95)
TukeyHSD(anov, 'factor(study_inter_sd)', conf.level=0.95)
TukeyHSD(anov, 'factor(base):factor(ensemble)', conf.level=0.95)
#results table
tab <- sd_mses %>%
mutate(sc_combo = paste(scenario, study_sd, study_inter_sd, sep="_"),
sc_combo = factor(sc_combo)) %>%
select(s_nostudy, x_nostudy, causal_nostudy, s_studyind, x_studyind, causal_studyind,
s_tree, x_tree, causal_tree, s_forest, x_forest, causal_forest,
s_lasso, x_lasso, causal_lasso, ma) %>%
t()
colnames(tab) <- c("Low-Low","Medium-Low","Medium-Medium",
"Medium-High","High-High","Low-Low",
"Medium-Low","Medium-Medium","Medium-High",
"High-High","")
rownames(tab) <- c("S - Pool","X - Pool", "CF - Pool", "S - Indicator",
"X - Indicator", "CF - Indicator", "S - Tree", "X - Tree",
"CF - Tree", "S - Forest", "X - Forest", "CF - Forest",
"S - Lasso", "X - Lasso", "CF - Lasso", "Meta-Analysis")
#print(tab)
rows <- c()
for (j in 1:nrow(tab)) {
res <- rownames(tab)[j]
for (i in 1:ncol(tab)) {
res <- paste(res, tab[j,i], sep=" & ")
}
rows[j] <- res
}
# library(knitr)
# library(kableExtra)
# kable(tab,"html") %>%
#   column_spec(1:11, border_right = T) %>%
#   column_spec(12, width = "30em") %>%
#   add_header_above(c("","Scenario 1a"=5, "Scenario 1b"=5, "Scenario 2"=1)) %>%
#   kable_styling()
rows
mod_params <- lm(MSE ~ factor(base) + factor(ensemble) + factor(study_sd) +
factor(study_inter_sd) + factor(scenario) +
factor(base)*factor(ensemble),
data=filter(means_long, base != "Meta-Analysis", scenario != 2))
summary(mod_params)
anova(mod_params)
anov <- aov(MSE ~ factor(base) + factor(ensemble) + factor(study_sd) +
factor(study_inter_sd) + factor(scenario) +
factor(base)*factor(ensemble),
data=filter(means_long, base != "Meta-Analysis", scenario != 2))
TukeyHSD(anov, 'factor(base)', conf.level=0.95)
TukeyHSD(anov, 'factor(ensemble)', conf.level=0.95)
TukeyHSD(anov, 'factor(study_sd)', conf.level=0.95)
TukeyHSD(anov, 'factor(study_inter_sd)', conf.level=0.95)
TukeyHSD(anov, 'factor(base):factor(ensemble)', conf.level=0.95)
library(dplyr)
library(causalToolbox)
library(rsample)
library(rpart)
library(ranger)
library(glmnet)
library(grf)
library(fastDummies)
library(lme4)
source("Comparing_methods_functions.R")
gen_data <- function (K, n_mean, n_sd, study_mean, study_inter_mean,
study_sd, study_inter_sd, scenario,
ncovar=5, sd=sqrt(0.01)) {
all_dat <- data.frame()
n_study <- floor(rnorm(K, mean=n_mean, sd=n_sd))
if (scenario %in% c("1a","1b")) {
study_main <- rnorm(K, mean=study_mean, sd=study_sd)
study_inter <- rnorm(K, mean=study_inter_mean, sd=study_inter_sd)
}
for (k in 1:K) {
n <- n_study[k]
#sample covariates
dat <- data.frame(matrix(rnorm(n*ncovar), nrow=n, ncol=ncovar))
colnames(dat) <- paste0("X", seq(1,ncovar))
#treatment
dat$W <- rbinom(n, size=1, prob=0.5)
#study and id
dat$S <- rep(k, n)
dat$id <- seq(1, n)
#noise
dat$eps <- rnorm(n, mean=0, sd=sd)
all_dat <- bind_rows(all_dat, dat)
}
#tau and Y
if (scenario == "1a") {
all_dat$m <- all_dat$X1/2 + all_dat$X2 + all_dat$X3 + all_dat$X4 +
study_main[all_dat$S] + study_inter[all_dat$S]*all_dat$X1
all_dat$tau <- all_dat$X1*(all_dat$X1>0) + study_main[all_dat$S] +
study_inter[all_dat$S]*all_dat$X1
}
if (scenario == "1b") {
all_dat$m <- 0
all_dat$tau <- (2/(1+exp(-12*(all_dat$X1-1/2))))*(2/(1+exp(-12*(all_dat$X2-1/2)))) +
study_main[all_dat$S] + study_inter[all_dat$S]*all_dat$X1
}
if (scenario == "2") {
all_dat$m <- all_dat$X1/2 + all_dat$X2 + all_dat$X3 + all_dat$X4
all_dat$tau <- ifelse(all_dat$S %in% c(1:4), (2/(1+exp(-12*(all_dat$X1-1/2))))*(2/(1+exp(-12*(all_dat$X2-1/2)))),
ifelse(all_dat$S %in% c(5:8), all_dat$X1*(all_dat$X1>0), 0))
}
all_dat$Y <- all_dat$m + (2*all_dat$W-1)/2*all_dat$tau + all_dat$eps
all_dat <- all_dat %>%
select(-eps,-m) %>%
mutate(S = factor(S)) %>%
relocate(S, id, W, X1, X2, X3, X4, X5, Y, tau)
return(all_dat)
}
## Comparing Methods
compare_mse <- function (K, n_mean, n_sd, study_mean, study_inter_mean,
study_sd, study_inter_sd, scenario, honesty) {
#generate data
sim_dat <- gen_data(K, n_mean, n_sd, study_mean, study_inter_mean,
study_sd, study_inter_sd, scenario)
covars <- grep("^X", names(sim_dat), value=TRUE)
feat <- select(sim_dat, c(S,all_of(covars))) %>%
fastDummies::dummy_cols(select_columns="S", remove_selected_columns=T)
feat_nostudy <- select(sim_dat, all_of(covars))
tr <- sim_dat$W
y <- sim_dat$Y
tau_true <- sim_dat$tau
### causal forest options ###
#no study
tau_forest_nostudy <- causal_forest(X=feat_nostudy, Y=y, W=tr, num.threads=3, honesty=honesty, num.trees=1000)
tau_hat_nostudy <- predict(tau_forest_nostudy)$predictions
causal_nostudy <- mean((tau_hat_nostudy - tau_true)^2)
rm(list = c("tau_forest_nostudy", "tau_hat_nostudy"))
#study indicator
tau_forest <- causal_forest(X=feat, Y=y, W=tr, num.threads=3, honesty=honesty, num.trees=1000)
tau_hat <- predict(tau_forest)$predictions
causal_studyind <- mean((tau_hat - tau_true)^2)
rm(list = c("tau_forest", "tau_hat"))
#tan
causal_tan <- tan_preds(K, sim_dat, covars, "causalforest", honesty=honesty)
causal_tree <- causal_tan["mse_tree"]
causal_forest <- causal_tan["mse_forest"]
causal_lasso <- causal_tan["mse_lasso"]
rm(list = c("causal_tan"))
### x-learner options ###
#no study
x_rf_nostudy <- X_RF(feat=feat_nostudy, tr=tr, yobs=y, nthread=3)
cate_x_rf_nostudy <- EstimateCate(x_rf_nostudy, feat_nostudy)
x_nostudy <- mean((cate_x_rf_nostudy - tau_true)^2)
rm(list = c("x_rf_nostudy", "cate_x_rf_nostudy"))
#study indicator
x_rf_studyind <- X_RF(feat = feat, tr = tr, yobs = y, nthread=3)
cate_x_rf_studyind <- EstimateCate(x_rf_studyind, feat)
x_studyind <- mean((cate_x_rf_studyind - tau_true)^2)
rm(list = c("x_rf_studyind", "cate_x_rf_studyind"))
#tan
x_tan <- tan_preds(K, sim_dat, covars, "xlearner")
x_tree <- x_tan["mse_tree"]
x_forest <- x_tan["mse_forest"]
x_lasso <- x_tan["mse_lasso"]
rm(list = c("x_tan"))
### s-learner options ###
#no study
s_rf_nostudy <- S_RF(feat=feat_nostudy, tr=tr, yobs=y, nthread=3)
cate_s_rf_nostudy <- EstimateCate(s_rf_nostudy, feat_nostudy)
s_nostudy <- mean((cate_s_rf_nostudy - tau_true)^2)
rm(list = c("s_rf_nostudy", "cate_s_rf_nostudy"))
#study indicator
s_rf_studyind <- S_RF(feat = feat, tr = tr, yobs = y, nthread=3)
cate_s_rf_studyind <- EstimateCate(s_rf_studyind, feat)
s_studyind <- mean((cate_s_rf_studyind - tau_true)^2)
rm(list = c("s_rf_studyind", "cate_s_rf_studyind"))
#tan
s_tan <- tan_preds(K, sim_dat, covars, "slearner")
s_tree <- s_tan["mse_tree"]
s_forest <- s_tan["mse_forest"]
s_lasso <- s_tan["mse_lasso"]
rm(list = c("s_tan"))
### meta-analysis ###
#mixed_mod <- lmer(Y ~ W*X1 + W*X2 + W*X3 + W*X4 + W*X5 + (1|S), data=sim_dat) #naive
mixed_mod <- lmer(Y ~ W + X1 + X2 + X3 + X4 + W:X1 +
(1 + W + X1 + W:X1|S), data=sim_dat)
sim_dat_trt <- mutate(sim_dat, W=1)
sim_dat_cntrl <- mutate(sim_dat, W=0)
cate_ma <- predict(mixed_mod, sim_dat_trt) - predict(mixed_mod, sim_dat_cntrl)
ma <- mean((cate_ma - tau_true)^2)
mses <- data.frame(x_nostudy, x_studyind, x_tree, x_forest, x_lasso,
causal_nostudy, causal_studyind, causal_tree, causal_forest, causal_lasso,
s_nostudy, s_studyind, s_tree, s_forest, s_lasso, ma)
return(mses)
}
K=10
n_mean=500
n_sd=0
study_mean=0
study_inter_mean=0.05
study_sd=0
study_inter_mean=c(0)
study_inter_mean=0
study_sd=1
study_inter_sd=0.5
scenario="1a"
honesty=F
#generate data
sim_dat <- gen_data(K, n_mean, n_sd, study_mean, study_inter_mean,
study_sd, study_inter_sd, scenario)
covars <- grep("^X", names(sim_dat), value=TRUE)
feat <- select(sim_dat, c(S,all_of(covars))) %>%
fastDummies::dummy_cols(select_columns="S", remove_selected_columns=T)
feat_nostudy <- select(sim_dat, all_of(covars))
tr <- sim_dat$W
y <- sim_dat$Y
tau_true <- sim_dat$tau
#mixed_mod <- lmer(Y ~ W*X1 + W*X2 + W*X3 + W*X4 + W*X5 + (1|S), data=sim_dat) #naive
mixed_mod <- lmer(Y ~ W + X1 + X2 + X3 + X4 + W:X1 +
(1 + W + X1 + W:X1|S), data=sim_dat)
summary(mixed_mod)
sim_dat_trt <- mutate(sim_dat, W=1)
sim_dat_cntrl <- mutate(sim_dat, W=0)
cate_ma <- predict(mixed_mod, sim_dat_trt) - predict(mixed_mod, sim_dat_cntrl)
cate_ma
summary(mixed_mod)
coef(mixed_mod)
coef(summary(mixed_mod))
fixef(mixed_mod)
a <- -0.1485995 + 0.6239165*sim_dat$X1
View(cbind(a, cate_ma))
f <- coef(mixed_mod)$S
f
f <- rownames_to_column(f)
f <- mutate(f, S=seq(1:10))
f
c <- left_join(sim_dat, f, by="S")
f <- mutate(f, S=factor(S))
c <- left_join(sim_dat, f, by="S")
View(c)
b <- sim_dat$W.y + sim_dat$W:X1*sim_dat*X1.x
b <- sim_dat$W.y + sim_dat$W:X1*sim_dat$X1.x
sim_dat$W:X1
b <- c$W.y + c$`W:X1`*c$X1.x
View(b)
b
View(cbind(cate_ma, a, b))
cor(cate_ma, b)
all.equal(cate_ma, b)
all.Equal(cate_ma, b)
sum(cate_ma==b)
sum(cate_ma==b)/length(cate_ma)
sum(abs(cate_ma-b)<=.00001)/length(cate_ma)
ranef(mixed_mod)
fixef(mixed_mod)
coef(mixed_mod)
-0.1485995-0.6487118
-0.1485995+1.8741029
